{"version":3,"sources":["Components/Notes.js","Components/Form.js","Services.js","App.js","serviceWorker.js","index.js"],"names":["Notes","notes","toggleImportance","notesList","map","note","key","id","content","onClick","Form","input","sub","onSubmit","onChange","type","request","axios","get","nonExisting","date","important","then","res","data","concat","newObject","post","put","App","useState","setNotes","newNotes","setNewNotes","useEffect","console","log","Services","intialNotes","length","className","find","n","changedNote","updatedNote","catch","err","alert","filter","e","target","value","noteObj","Date","Math","random","returnedNote","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kOAWeA,EATD,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAMC,EAAqB,EAArBA,iBAChBC,EAAYF,EAAMG,KAAI,SAACC,GACzB,OAAO,uBAAGC,IAAKD,EAAKE,IAAKF,EAAKG,QAAvB,IAAgC,4BAAQC,QAAS,kBAAKP,EAAiBG,EAAKE,MAA5C,yBAEzC,OACA,oCAAGJ,ICKUO,EAVF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,IACnB,OACE,0BAAMC,SAAUD,GACd,2BAAOE,SAAUH,IACjB,4BAAQI,KAAK,UAAb,Y,gBCuBS,EAtBA,WACb,IAAMC,EAAUC,IAAMC,IAPR,cAQRC,EAAc,CAClBZ,GAAI,IACJC,QAAS,mCACTY,KAAM,2BACNC,WAAW,GAEb,OAAOL,EAAQM,MAAK,SAACC,GAAD,OAAOA,EAAIC,KAAKC,OAAON,OAc9B,EAXA,SAAAO,GAEb,OADgBT,IAAMU,KAlBR,aAkBqBD,GACpBJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAShB,EALA,SAACjB,EAAGmB,GAEjB,OADgBT,IAAMW,IAAN,UAxBF,aAwBE,YAAwBrB,GAAKmB,GAC9BJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SCqChBK,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACN7B,EADM,KACC8B,EADD,OAEmBD,qBAFnB,mBAENE,EAFM,KAEIC,EAFJ,OAGiBH,qBAHjB,mBAgDb,OAhDa,UAMbI,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEGf,MAAK,SAACgB,GACLP,EAASO,QAEZ,IAEHH,QAAQC,IAAI,SAAUnC,EAAMsC,OAAQ,SAkClC,yBAAKC,UAAU,OACb,uCACA,kBAAC,EAAD,CAAOvC,MAAOA,EAAOC,iBAlBA,SAACK,GACxB4B,QAAQC,IAAI,iBAAiB7B,EAAG,mBAChC,IAAMF,EAAOJ,EAAMwC,MAAK,SAACC,GAAD,OAAKA,EAAEnC,KAAKA,KAC9BoC,EAAW,2BAAOtC,GAAP,IAAYgB,WAAYhB,EAAKgB,YAC9CgB,EACQ9B,EAAGoC,GACRrB,MAAK,SAACsB,GACLb,EAAS9B,EAAMG,KAAI,SAACC,GAAD,OAAQA,EAAKE,KAAOA,EAAKF,EAAOuC,SAEpDC,OAAM,SAACC,GACNC,MAAM,aAAD,OAAc1C,EAAKG,QAAnB,qCACLuB,EAAS9B,EAAM+C,QAAO,SAACN,GAAD,OAAKA,EAAEnC,KAAOA,YAQtC,kBAAC,EAAD,CAAMI,MAnCM,SAACsC,GACfhB,EAAYgB,EAAEC,OAAOC,QAkCGvC,IA/BV,SAACqC,GACf,IAAMG,EAAU,CACd5C,QAAQwB,EACRZ,KAAKiC,OACLhC,UAAUiC,KAAKC,SAAW,IAE5BlB,EACQe,GACL9B,MAAK,SAACkC,GAAgBzB,EAAS9B,EAAMwB,OAAO+B,OAC/CP,EAAEQ,sBCxBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.9511ea35.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Notes = ({notes,toggleImportance}) =>{\r\n  let notesList = notes.map((note)=>{\r\n    return(<p key={note.id}>{note.content} <button onClick={() =>toggleImportance(note.id)}>Toggle Importance</button></p>)\r\n  })\r\n  return(\r\n  <>{notesList}</>\r\n  )\r\n}\r\n\r\nexport default Notes","import React from 'react';\r\n\r\nconst Form = ({input,sub}) =>{\r\n  return(\r\n    <form onSubmit={sub}>\r\n      <input onChange={input}/>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default Form;","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst display = () =>{\r\n  console.log(\"display funtion\");\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then((res)=>res.data.concat(nonExisting));\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl,newObject);\r\n  return request.then(res=>res.data);\r\n}\r\n\r\n\r\nconst update = (id,newObject) =>{ \r\n  const request = axios.put(`${baseUrl}/${id}`,newObject);\r\n  return request.then(res=>res.data);\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n}","import React, { useState, useEffect } from \"react\";\nimport Notes from \"./Components/Notes\"\nimport Form from \"./Components/Form\"\nimport Services from \"./Services\"\n\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [newNotes, setNewNotes] = useState();\n  const [showAll, setShowAll] = useState();\n\n\n  useEffect(() => {\n    console.log(\"effect\");\n    Services\n    .getAll()\n      .then((intialNotes) => {\n        setNotes(intialNotes);\n      })\n  }, []);\n\n  console.log(\"render\", notes.length, \"notes\");\n\n  const newNote = (e) =>{\n    setNewNotes(e.target.value)\n  }\n\n  const addNote = (e) =>{\n    const noteObj = {\n      content:newNotes, \n      date:Date(),\n      important:Math.random() < 0.5\n    }\n    Services\n    .create(noteObj)\n      .then((returnedNote)=>{setNotes(notes.concat(returnedNote))})\n    e.preventDefault();\n  }\n\n  const toggleImportance = (id) =>{\n    console.log(\"importance of \",id,\" to be toggeled\");\n    const note = notes.find((n)=>n.id===id);\n    const changedNote = {...note,important: !note.important}\n    Services\n    .update(id,changedNote)\n      .then((updatedNote)=>{\n        setNotes(notes.map((note)=>note.id !== id ? note : updatedNote));\n      })\n      .catch((err)=>{\n        alert(`the note \"${note.content}\" is already deleted from server`);\n        setNotes(notes.filter((n)=>n.id !== id));\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Program</h1>\n      <Notes notes={notes} toggleImportance={toggleImportance} />\n      <Form input={newNote} sub={addNote}  />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}